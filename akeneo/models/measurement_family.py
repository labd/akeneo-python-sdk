# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from akeneo.models.measurement_families_get_list200_response_labels import MeasurementFamiliesGetList200ResponseLabels
from akeneo.models.measurement_families_get_list200_response_units import MeasurementFamiliesGetList200ResponseUnits

class MeasurementFamily(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    code: StrictStr = Field(..., description="Measurement family code")
    labels: Optional[MeasurementFamiliesGetList200ResponseLabels] = None
    standard_unit_code: StrictStr = Field(..., description="Unit code used as the standard unit for this measurement family")
    units: MeasurementFamiliesGetList200ResponseUnits = ...
    __properties = ["code", "labels", "standard_unit_code", "units"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MeasurementFamily:
        """Create an instance of MeasurementFamily from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of units
        if self.units:
            _dict['units'] = self.units.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MeasurementFamily:
        """Create an instance of MeasurementFamily from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MeasurementFamily.parse_obj(obj)

        _obj = MeasurementFamily.parse_obj({
            "code": obj.get("code"),
            "labels": MeasurementFamiliesGetList200ResponseLabels.from_dict(obj.get("labels")) if obj.get("labels") is not None else None,
            "standard_unit_code": obj.get("standard_unit_code"),
            "units": MeasurementFamiliesGetList200ResponseUnits.from_dict(obj.get("units")) if obj.get("units") is not None else None
        })
        return _obj

