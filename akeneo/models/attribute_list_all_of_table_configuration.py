# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from akeneo.models.attribute_list_all_of_labels import AttributeListAllOfLabels
from akeneo.models.attribute_list_all_of_validations import AttributeListAllOfValidations

class AttributeListAllOfTableConfiguration(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    code: StrictStr = Field(..., description="Column code")
    data_type: StrictStr = Field(..., description="Column data type")
    validations: Optional[AttributeListAllOfValidations] = None
    labels: Optional[AttributeListAllOfLabels] = None
    is_required_for_completeness: Optional[StrictBool] = Field(False, description="Defines if the column should be entirely filled for the attribute to be considered complete")
    __properties = ["code", "data_type", "validations", "labels", "is_required_for_completeness"]

    @validator('data_type')
    def data_type_validate_enum(cls, v):
        if v not in ('select', 'text', 'number', 'boolean', 'measurement'):
            raise ValueError("must validate the enum values ('select', 'text', 'number', 'boolean', 'measurement')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AttributeListAllOfTableConfiguration:
        """Create an instance of AttributeListAllOfTableConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of validations
        if self.validations:
            _dict['validations'] = self.validations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AttributeListAllOfTableConfiguration:
        """Create an instance of AttributeListAllOfTableConfiguration from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AttributeListAllOfTableConfiguration.parse_obj(obj)

        _obj = AttributeListAllOfTableConfiguration.parse_obj({
            "code": obj.get("code"),
            "data_type": obj.get("data_type"),
            "validations": AttributeListAllOfValidations.from_dict(obj.get("validations")) if obj.get("validations") is not None else None,
            "labels": AttributeListAllOfLabels.from_dict(obj.get("labels")) if obj.get("labels") is not None else None,
            "is_required_for_completeness": obj.get("is_required_for_completeness") if obj.get("is_required_for_completeness") is not None else False
        })
        return _obj

