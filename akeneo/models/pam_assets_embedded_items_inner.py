# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from akeneo.models.pam_assets_embedded_items_inner_all_of_reference_files_inner import PAMAssetsEmbeddedItemsInnerAllOfReferenceFilesInner
from akeneo.models.pam_assets_embedded_items_inner_all_of_variation_files_inner import PAMAssetsEmbeddedItemsInnerAllOfVariationFilesInner
from akeneo.models.products_embedded_items_inner_all_of_links import ProductsEmbeddedItemsInnerAllOfLinks

class PAMAssetsEmbeddedItemsInner(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    links: Optional[ProductsEmbeddedItemsInnerAllOfLinks] = Field(None, alias="_links")
    code: StrictStr = Field(..., description="PAM asset code")
    categories: Optional[List[StrictStr]] = Field(None, description="Codes of the PAM asset categories in which the asset is classified")
    description: Optional[StrictStr] = Field('null', description="Description of the PAM asset")
    localizable: Optional[StrictBool] = Field(False, description="Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale")
    tags: Optional[List[StrictStr]] = Field(None, description="Tags of the PAM asset")
    end_of_use: Optional[StrictStr] = Field('null', description="Date on which the PAM asset expire")
    variation_files: Optional[List[PAMAssetsEmbeddedItemsInnerAllOfVariationFilesInner]] = Field(None, description="Variations of the PAM asset")
    reference_files: Optional[List[PAMAssetsEmbeddedItemsInnerAllOfReferenceFilesInner]] = Field(None, description="Reference files of the PAM asset")
    __properties = ["_links", "code", "categories", "description", "localizable", "tags", "end_of_use", "variation_files", "reference_files"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PAMAssetsEmbeddedItemsInner:
        """Create an instance of PAMAssetsEmbeddedItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variation_files (list)
        _items = []
        if self.variation_files:
            for _item in self.variation_files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variation_files'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reference_files (list)
        _items = []
        if self.reference_files:
            for _item in self.reference_files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reference_files'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PAMAssetsEmbeddedItemsInner:
        """Create an instance of PAMAssetsEmbeddedItemsInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PAMAssetsEmbeddedItemsInner.parse_obj(obj)

        _obj = PAMAssetsEmbeddedItemsInner.parse_obj({
            "links": ProductsEmbeddedItemsInnerAllOfLinks.from_dict(obj.get("_links")) if obj.get("_links") is not None else None,
            "code": obj.get("code"),
            "categories": obj.get("categories"),
            "description": obj.get("description") if obj.get("description") is not None else 'null',
            "localizable": obj.get("localizable") if obj.get("localizable") is not None else False,
            "tags": obj.get("tags"),
            "end_of_use": obj.get("end_of_use") if obj.get("end_of_use") is not None else 'null',
            "variation_files": [PAMAssetsEmbeddedItemsInnerAllOfVariationFilesInner.from_dict(_item) for _item in obj.get("variation_files")] if obj.get("variation_files") is not None else None,
            "reference_files": [PAMAssetsEmbeddedItemsInnerAllOfReferenceFilesInner.from_dict(_item) for _item in obj.get("reference_files")] if obj.get("reference_files") is not None else None
        })
        return _obj

