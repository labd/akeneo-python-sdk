# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr
from akeneo.models.asset_family_list_all_of_labels import AssetFamilyListAllOfLabels
from akeneo.models.asset_family_list_all_of_naming_convention import AssetFamilyListAllOfNamingConvention
from akeneo.models.asset_family_list_all_of_product_link_rules import AssetFamilyListAllOfProductLinkRules
from akeneo.models.asset_family_list_all_of_transformations import AssetFamilyListAllOfTransformations

class AssetFamilyListAllOf(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    code: StrictStr = Field(..., description="Asset family code")
    labels: Optional[AssetFamilyListAllOfLabels] = None
    attribute_as_main_media: Optional[StrictStr] = Field('First media file or media link attribute that was created', description="Attribute code that is used as the main media of the asset family.")
    naming_convention: Optional[AssetFamilyListAllOfNamingConvention] = None
    product_link_rules: Optional[List[AssetFamilyListAllOfProductLinkRules]] = Field(None, description="The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>.")
    transformations: Optional[List[AssetFamilyListAllOfTransformations]] = Field(None, description="The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>.")
    __properties = ["code", "labels", "attribute_as_main_media", "naming_convention", "product_link_rules", "transformations"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AssetFamilyListAllOf:
        """Create an instance of AssetFamilyListAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of naming_convention
        if self.naming_convention:
            _dict['naming_convention'] = self.naming_convention.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in product_link_rules (list)
        _items = []
        if self.product_link_rules:
            for _item in self.product_link_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['product_link_rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transformations (list)
        _items = []
        if self.transformations:
            for _item in self.transformations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transformations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AssetFamilyListAllOf:
        """Create an instance of AssetFamilyListAllOf from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AssetFamilyListAllOf.parse_obj(obj)

        _obj = AssetFamilyListAllOf.parse_obj({
            "code": obj.get("code"),
            "labels": AssetFamilyListAllOfLabels.from_dict(obj.get("labels")) if obj.get("labels") is not None else None,
            "attribute_as_main_media": obj.get("attribute_as_main_media") if obj.get("attribute_as_main_media") is not None else 'First media file or media link attribute that was created',
            "naming_convention": AssetFamilyListAllOfNamingConvention.from_dict(obj.get("naming_convention")) if obj.get("naming_convention") is not None else None,
            "product_link_rules": [AssetFamilyListAllOfProductLinkRules.from_dict(_item) for _item in obj.get("product_link_rules")] if obj.get("product_link_rules") is not None else None,
            "transformations": [AssetFamilyListAllOfTransformations.from_dict(_item) for _item in obj.get("transformations")] if obj.get("transformations") is not None else None
        })
        return _obj

