# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.product_model_list import ProductModelList  # noqa: E501
from openapi_client.rest import ApiException

class TestProductModelList(unittest.TestCase):
    """ProductModelList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ProductModelList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProductModelList`
        """
        model = openapi_client.models.product_model_list.ProductModelList()  # noqa: E501
        if include_optional :
            return ProductModelList(
                links = openapi_client.models.product_list_all_of__links.ProductList_allOf__links(
                    self = openapi_client.models.product_list_all_of__links_self.ProductList_allOf__links_self(
                        href = '', ), ), 
                code = '', 
                family = '', 
                family_variant = '', 
                parent = '', 
                categories = [
                    ''
                    ], 
                values = {
                    'key' : [
                        None
                        ]
                    }, 
                associations = openapi_client.models.product_model_list_all_of_associations.ProductModelList_allOf_associations(
                    association_type_code = openapi_client.models.product_list_all_of_1_associations_association_type_code.ProductList_allOf_1_associations_associationTypeCode(
                        groups = [
                            ''
                            ], 
                        products = [
                            ''
                            ], 
                        product_models = [
                            ''
                            ], ), ), 
                quantified_associations = openapi_client.models.product_model_list_all_of_quantified_associations.ProductModelList_allOf_quantified_associations(
                    quantified_association_type_code = openapi_client.models.product_model_list_all_of_quantified_associations_quantified_association_type_code.ProductModelList_allOf_quantified_associations_quantifiedAssociationTypeCode(
                        products = [
                            openapi_client.models.product_list_all_of_1_quantified_associations_quantified_association_type_code_products.ProductList_allOf_1_quantified_associations_quantifiedAssociationTypeCode_products(
                                identifier = '', 
                                quantity = 56, )
                            ], 
                        product_models = [
                            openapi_client.models.product_list_all_of_1_quantified_associations_quantified_association_type_code_product_models.ProductList_allOf_1_quantified_associations_quantifiedAssociationTypeCode_product_models(
                                code = '', 
                                quantity = 56, )
                            ], ), ), 
                created = '', 
                updated = '', 
                metadata = openapi_client.models.product_model_list_all_of_metadata.ProductModelList_allOf_metadata(
                    workflow_status = 'read_only', ), 
                quality_scores = None
            )
        else :
            return ProductModelList(
                code = '',
                family_variant = '',
        )
        """

    def testProductModelList(self):
        """Test ProductModelList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
