# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import date

from pydantic import Field, StrictStr, conint

from typing import Optional

from openapi_client.models.product_uuids import ProductUuids
from openapi_client.models.products2 import Products2

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CatalogProductsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_app_catalog_product_uuids(self, id : Annotated[StrictStr, Field(..., description="Id of the catalog")], search_after : Annotated[Optional[StrictStr], Field(description="Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section")] = None, limit : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section")] = None, updated_before : Annotated[Optional[date], Field(description="Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)")] = None, updated_after : Annotated[Optional[date], Field(description="Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)")] = None, **kwargs) -> ProductUuids:  # noqa: E501
        """Get the list of product uuids  # noqa: E501

        This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_catalog_product_uuids(id, search_after, limit, updated_before, updated_after, async_req=True)
        >>> result = thread.get()

        :param id: Id of the catalog (required)
        :type id: str
        :param search_after: Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
        :type search_after: str
        :param limit: Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
        :type limit: int
        :param updated_before: Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
        :type updated_before: date
        :param updated_after: Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
        :type updated_after: date
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ProductUuids
        """
        kwargs['_return_http_data_only'] = True
        return self.get_app_catalog_product_uuids_with_http_info(id, search_after, limit, updated_before, updated_after, **kwargs)  # noqa: E501

    @validate_arguments
    def get_app_catalog_product_uuids_with_http_info(self, id : Annotated[StrictStr, Field(..., description="Id of the catalog")], search_after : Annotated[Optional[StrictStr], Field(description="Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section")] = None, limit : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section")] = None, updated_before : Annotated[Optional[date], Field(description="Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)")] = None, updated_after : Annotated[Optional[date], Field(description="Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)")] = None, **kwargs):  # noqa: E501
        """Get the list of product uuids  # noqa: E501

        This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_catalog_product_uuids_with_http_info(id, search_after, limit, updated_before, updated_after, async_req=True)
        >>> result = thread.get()

        :param id: Id of the catalog (required)
        :type id: str
        :param search_after: Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
        :type search_after: str
        :param limit: Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
        :type limit: int
        :param updated_before: Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
        :type updated_before: date
        :param updated_after: Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
        :type updated_after: date
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ProductUuids, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'search_after',
            'limit',
            'updated_before',
            'updated_after'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_catalog_product_uuids" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        # process the query parameters
        _query_params = []
        if _params.get('search_after') is not None:  # noqa: E501
            _query_params.append(('search_after', _params['search_after']))
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('updated_before') is not None:  # noqa: E501
            _query_params.append(('updated_before', _params['updated_before']))
        if _params.get('updated_after') is not None:  # noqa: E501
            _query_params.append(('updated_after', _params['updated_after']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'code', 'message'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "ProductUuids",
            '401': "GetProducts401Response",
            '403': "GetProducts401Response",
            '404': "GetProducts401Response",
        }

        return self.api_client.call_api(
            '/api/rest/v1/catalogs/{id}/product-uuids', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_app_catalog_products(self, id : Annotated[StrictStr, Field(..., description="Catalog ID")], search_after : Annotated[Optional[StrictStr], Field(description="Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section")] = None, limit : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section")] = None, updated_before : Annotated[Optional[date], Field(description="Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)")] = None, updated_after : Annotated[Optional[date], Field(description="Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)")] = None, **kwargs) -> Products2:  # noqa: E501
        """Get the list of products related to a catalog  # noqa: E501

        This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_catalog_products(id, search_after, limit, updated_before, updated_after, async_req=True)
        >>> result = thread.get()

        :param id: Catalog ID (required)
        :type id: str
        :param search_after: Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
        :type search_after: str
        :param limit: Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
        :type limit: int
        :param updated_before: Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
        :type updated_before: date
        :param updated_after: Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
        :type updated_after: date
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Products2
        """
        kwargs['_return_http_data_only'] = True
        return self.get_app_catalog_products_with_http_info(id, search_after, limit, updated_before, updated_after, **kwargs)  # noqa: E501

    @validate_arguments
    def get_app_catalog_products_with_http_info(self, id : Annotated[StrictStr, Field(..., description="Catalog ID")], search_after : Annotated[Optional[StrictStr], Field(description="Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section")] = None, limit : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section")] = None, updated_before : Annotated[Optional[date], Field(description="Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)")] = None, updated_after : Annotated[Optional[date], Field(description="Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)")] = None, **kwargs):  # noqa: E501
        """Get the list of products related to a catalog  # noqa: E501

        This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_catalog_products_with_http_info(id, search_after, limit, updated_before, updated_after, async_req=True)
        >>> result = thread.get()

        :param id: Catalog ID (required)
        :type id: str
        :param search_after: Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href=\"/documentation/pagination.html\">Pagination</a> section
        :type search_after: str
        :param limit: Number of results by page, see <a href=\"/documentation/pagination.html\">Pagination</a> section
        :type limit: int
        :param updated_before: Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
        :type updated_before: date
        :param updated_after: Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
        :type updated_after: date
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Products2, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'search_after',
            'limit',
            'updated_before',
            'updated_after'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_catalog_products" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        # process the query parameters
        _query_params = []
        if _params.get('search_after') is not None:  # noqa: E501
            _query_params.append(('search_after', _params['search_after']))
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('updated_before') is not None:  # noqa: E501
            _query_params.append(('updated_before', _params['updated_before']))
        if _params.get('updated_after') is not None:  # noqa: E501
            _query_params.append(('updated_after', _params['updated_after']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'code', 'message'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Products2",
            '401': "GetProducts401Response",
            '403': "GetProducts401Response",
            '404': "GetProducts401Response",
        }

        return self.api_client.call_api(
            '/api/rest/v1/catalogs/{id}/products', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_app_catalog_products_uuid(self, id : Annotated[StrictStr, Field(..., description="Catalog ID")], uuid : Annotated[StrictStr, Field(..., description="Product UUID")], **kwargs) -> None:  # noqa: E501
        """Get a product related to a catalog  # noqa: E501

        This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_catalog_products_uuid(id, uuid, async_req=True)
        >>> result = thread.get()

        :param id: Catalog ID (required)
        :type id: str
        :param uuid: Product UUID (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.get_app_catalog_products_uuid_with_http_info(id, uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def get_app_catalog_products_uuid_with_http_info(self, id : Annotated[StrictStr, Field(..., description="Catalog ID")], uuid : Annotated[StrictStr, Field(..., description="Product UUID")], **kwargs):  # noqa: E501
        """Get a product related to a catalog  # noqa: E501

        This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href=\"apps/catalogs.html#troubleshooting\">App Catalog</a> section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_catalog_products_uuid_with_http_info(id, uuid, async_req=True)
        >>> result = thread.get()

        :param id: Catalog ID (required)
        :type id: str
        :param uuid: Product UUID (required)
        :type uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_app_catalog_products_uuid" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']
        if _params['uuid']:
            _path_params['uuid'] = _params['uuid']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'code', 'message'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/rest/v1/catalogs/{id}/products/{uuid}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
