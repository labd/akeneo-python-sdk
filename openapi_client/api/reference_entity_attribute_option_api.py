# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr

from typing import List

from openapi_client.models.get_reference_entity_attributes_attribute_code_options200_response_inner import GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ReferenceEntityAttributeOptionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_reference_entity_attributes_attribute_code_options(self, reference_entity_code : Annotated[StrictStr, Field(..., description="Code of the reference entity")], attribute_code : Annotated[StrictStr, Field(..., description="Code of the attribute")], **kwargs) -> List[GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner]:  # noqa: E501
        """Get a list of attribute options of a given attribute for a given reference entity  # noqa: E501

        This endpoint allows you to get a list of attribute options for a given reference entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_reference_entity_attributes_attribute_code_options(reference_entity_code, attribute_code, async_req=True)
        >>> result = thread.get()

        :param reference_entity_code: Code of the reference entity (required)
        :type reference_entity_code: str
        :param attribute_code: Code of the attribute (required)
        :type attribute_code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_reference_entity_attributes_attribute_code_options_with_http_info(reference_entity_code, attribute_code, **kwargs)  # noqa: E501

    @validate_arguments
    def get_reference_entity_attributes_attribute_code_options_with_http_info(self, reference_entity_code : Annotated[StrictStr, Field(..., description="Code of the reference entity")], attribute_code : Annotated[StrictStr, Field(..., description="Code of the attribute")], **kwargs):  # noqa: E501
        """Get a list of attribute options of a given attribute for a given reference entity  # noqa: E501

        This endpoint allows you to get a list of attribute options for a given reference entity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_reference_entity_attributes_attribute_code_options_with_http_info(reference_entity_code, attribute_code, async_req=True)
        >>> result = thread.get()

        :param reference_entity_code: Code of the reference entity (required)
        :type reference_entity_code: str
        :param attribute_code: Code of the attribute (required)
        :type attribute_code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reference_entity_code',
            'attribute_code'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reference_entity_attributes_attribute_code_options" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reference_entity_code']:
            _path_params['reference_entity_code'] = _params['reference_entity_code']
        if _params['attribute_code']:
            _path_params['attribute_code'] = _params['attribute_code']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'code', 'message'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner]",
            '401': "GetProducts401Response",
            '406': "GetProducts401Response",
        }

        return self.api_client.call_api(
            '/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_reference_entity_attributes_attribute_code_options_code(self, reference_entity_code : Annotated[StrictStr, Field(..., description="Code of the reference entity")], attribute_code : Annotated[StrictStr, Field(..., description="Code of the attribute")], code : Annotated[StrictStr, Field(..., description="Code of the resource")], **kwargs) -> GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner:  # noqa: E501
        """Get an attribute option for a given attribute of a given reference entity  # noqa: E501

        This endpoint allows you to get the information about a given attribute option.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_reference_entity_attributes_attribute_code_options_code(reference_entity_code, attribute_code, code, async_req=True)
        >>> result = thread.get()

        :param reference_entity_code: Code of the reference entity (required)
        :type reference_entity_code: str
        :param attribute_code: Code of the attribute (required)
        :type attribute_code: str
        :param code: Code of the resource (required)
        :type code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner
        """
        kwargs['_return_http_data_only'] = True
        return self.get_reference_entity_attributes_attribute_code_options_code_with_http_info(reference_entity_code, attribute_code, code, **kwargs)  # noqa: E501

    @validate_arguments
    def get_reference_entity_attributes_attribute_code_options_code_with_http_info(self, reference_entity_code : Annotated[StrictStr, Field(..., description="Code of the reference entity")], attribute_code : Annotated[StrictStr, Field(..., description="Code of the attribute")], code : Annotated[StrictStr, Field(..., description="Code of the resource")], **kwargs):  # noqa: E501
        """Get an attribute option for a given attribute of a given reference entity  # noqa: E501

        This endpoint allows you to get the information about a given attribute option.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_reference_entity_attributes_attribute_code_options_code_with_http_info(reference_entity_code, attribute_code, code, async_req=True)
        >>> result = thread.get()

        :param reference_entity_code: Code of the reference entity (required)
        :type reference_entity_code: str
        :param attribute_code: Code of the attribute (required)
        :type attribute_code: str
        :param code: Code of the resource (required)
        :type code: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reference_entity_code',
            'attribute_code',
            'code'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reference_entity_attributes_attribute_code_options_code" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reference_entity_code']:
            _path_params['reference_entity_code'] = _params['reference_entity_code']
        if _params['attribute_code']:
            _path_params['attribute_code'] = _params['attribute_code']
        if _params['code']:
            _path_params['code'] = _params['code']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'code', 'message'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner",
            '401': "GetProducts401Response",
            '404': "GetProducts401Response",
            '406': "GetProducts401Response",
        }

        return self.api_client.call_api(
            '/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options/{code}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def patch_reference_entity_attributes_attribute_code_options_code(self, reference_entity_code : Annotated[StrictStr, Field(..., description="Code of the reference entity")], attribute_code : Annotated[StrictStr, Field(..., description="Code of the attribute")], code : Annotated[StrictStr, Field(..., description="Code of the resource")], body : GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner, **kwargs) -> None:  # noqa: E501
        """Update/create a reference entity attribute option  # noqa: E501

        This endpoint allows you to update a given option for a given attribute and a given reference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given reference entity, it creates it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_reference_entity_attributes_attribute_code_options_code(reference_entity_code, attribute_code, code, body, async_req=True)
        >>> result = thread.get()

        :param reference_entity_code: Code of the reference entity (required)
        :type reference_entity_code: str
        :param attribute_code: Code of the attribute (required)
        :type attribute_code: str
        :param code: Code of the resource (required)
        :type code: str
        :param body: (required)
        :type body: GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.patch_reference_entity_attributes_attribute_code_options_code_with_http_info(reference_entity_code, attribute_code, code, body, **kwargs)  # noqa: E501

    @validate_arguments
    def patch_reference_entity_attributes_attribute_code_options_code_with_http_info(self, reference_entity_code : Annotated[StrictStr, Field(..., description="Code of the reference entity")], attribute_code : Annotated[StrictStr, Field(..., description="Code of the attribute")], code : Annotated[StrictStr, Field(..., description="Code of the resource")], body : GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner, **kwargs):  # noqa: E501
        """Update/create a reference entity attribute option  # noqa: E501

        This endpoint allows you to update a given option for a given attribute and a given reference entity. Learn more about <a href=\"/documentation/update.html#patch-reference-entity-record-values\">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given reference entity, it creates it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_reference_entity_attributes_attribute_code_options_code_with_http_info(reference_entity_code, attribute_code, code, body, async_req=True)
        >>> result = thread.get()

        :param reference_entity_code: Code of the reference entity (required)
        :type reference_entity_code: str
        :param attribute_code: Code of the attribute (required)
        :type attribute_code: str
        :param code: Code of the resource (required)
        :type code: str
        :param body: (required)
        :type body: GetReferenceEntityAttributesAttributeCodeOptions200ResponseInner
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'reference_entity_code',
            'attribute_code',
            'code',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_reference_entity_attributes_attribute_code_options_code" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reference_entity_code']:
            _path_params['reference_entity_code'] = _params['reference_entity_code']
        if _params['attribute_code']:
            _path_params['attribute_code'] = _params['attribute_code']
        if _params['code']:
            _path_params['code'] = _params['code']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['body']:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'code', 'message', '_links'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options/{code}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
