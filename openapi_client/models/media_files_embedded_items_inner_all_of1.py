# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class MediaFilesEmbeddedItemsInnerAllOf1(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    code: Optional[StrictStr] = Field(None, description="Media file code")
    original_filename: Optional[StrictStr] = Field(None, description="Original filename of the media file")
    mime_type: Optional[StrictStr] = Field(None, description="Mime type of the media file")
    size: Optional[StrictInt] = Field(None, description="Size of the media file")
    extension: Optional[StrictStr] = Field(None, description="Extension of the media file")
    __properties = ["code", "original_filename", "mime_type", "size", "extension"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MediaFilesEmbeddedItemsInnerAllOf1:
        """Create an instance of MediaFilesEmbeddedItemsInnerAllOf1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MediaFilesEmbeddedItemsInnerAllOf1:
        """Create an instance of MediaFilesEmbeddedItemsInnerAllOf1 from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MediaFilesEmbeddedItemsInnerAllOf1.parse_obj(obj)

        _obj = MediaFilesEmbeddedItemsInnerAllOf1.parse_obj({
            "code": obj.get("code"),
            "original_filename": obj.get("original_filename"),
            "mime_type": obj.get("mime_type"),
            "size": obj.get("size"),
            "extension": obj.get("extension")
        })
        return _obj

