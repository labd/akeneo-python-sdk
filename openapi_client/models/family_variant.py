# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.family_variants_embedded_items_inner_all_of_labels import FamilyVariantsEmbeddedItemsInnerAllOfLabels
from openapi_client.models.family_variants_embedded_items_inner_all_of_variant_attribute_sets_inner import FamilyVariantsEmbeddedItemsInnerAllOfVariantAttributeSetsInner

class FamilyVariant(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    code: StrictStr = Field(..., description="Family variant code")
    variant_attribute_sets: List[FamilyVariantsEmbeddedItemsInnerAllOfVariantAttributeSetsInner] = Field(..., description="Attributes distribution according to the enrichment level")
    labels: Optional[FamilyVariantsEmbeddedItemsInnerAllOfLabels] = None
    __properties = ["code", "variant_attribute_sets", "labels"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FamilyVariant:
        """Create an instance of FamilyVariant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in variant_attribute_sets (list)
        _items = []
        if self.variant_attribute_sets:
            for _item in self.variant_attribute_sets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variant_attribute_sets'] = _items
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FamilyVariant:
        """Create an instance of FamilyVariant from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return FamilyVariant.parse_obj(obj)

        _obj = FamilyVariant.parse_obj({
            "code": obj.get("code"),
            "variant_attribute_sets": [FamilyVariantsEmbeddedItemsInnerAllOfVariantAttributeSetsInner.from_dict(_item) for _item in obj.get("variant_attribute_sets")] if obj.get("variant_attribute_sets") is not None else None,
            "labels": FamilyVariantsEmbeddedItemsInnerAllOfLabels.from_dict(obj.get("labels")) if obj.get("labels") is not None else None
        })
        return _obj

