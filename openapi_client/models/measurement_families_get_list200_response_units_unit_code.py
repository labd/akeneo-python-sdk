# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.measurement_families_get_list200_response_units_unit_code_convert_from_standard_inner import MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner
from openapi_client.models.measurement_families_get_list200_response_units_unit_code_labels import MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels

class MeasurementFamiliesGetList200ResponseUnitsUnitCode(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    code: Optional[StrictStr] = Field(None, description="Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.")
    labels: Optional[MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels] = None
    convert_from_standard: Optional[List[MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner]] = Field(None, description="Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.")
    symbol: Optional[StrictStr] = Field(None, description="Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.")
    __properties = ["code", "labels", "convert_from_standard", "symbol"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MeasurementFamiliesGetList200ResponseUnitsUnitCode:
        """Create an instance of MeasurementFamiliesGetList200ResponseUnitsUnitCode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in convert_from_standard (list)
        _items = []
        if self.convert_from_standard:
            for _item in self.convert_from_standard:
                if _item:
                    _items.append(_item.to_dict())
            _dict['convert_from_standard'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MeasurementFamiliesGetList200ResponseUnitsUnitCode:
        """Create an instance of MeasurementFamiliesGetList200ResponseUnitsUnitCode from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return MeasurementFamiliesGetList200ResponseUnitsUnitCode.parse_obj(obj)

        _obj = MeasurementFamiliesGetList200ResponseUnitsUnitCode.parse_obj({
            "code": obj.get("code"),
            "labels": MeasurementFamiliesGetList200ResponseUnitsUnitCodeLabels.from_dict(obj.get("labels")) if obj.get("labels") is not None else None,
            "convert_from_standard": [MeasurementFamiliesGetList200ResponseUnitsUnitCodeConvertFromStandardInner.from_dict(_item) for _item in obj.get("convert_from_standard")] if obj.get("convert_from_standard") is not None else None,
            "symbol": obj.get("symbol")
        })
        return _obj

