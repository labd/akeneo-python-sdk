# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class AssetFamilyListAllOfNamingConvention(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    source: Optional[Dict[str, Any]] = Field(None, description="The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.")
    pattern: Optional[StrictStr] = Field(None, description="The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>.")
    abort_asset_creation_on_error: Optional[StrictBool] = Field(None, description="Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>.")
    __properties = ["source", "pattern", "abort_asset_creation_on_error"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AssetFamilyListAllOfNamingConvention:
        """Create an instance of AssetFamilyListAllOfNamingConvention from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AssetFamilyListAllOfNamingConvention:
        """Create an instance of AssetFamilyListAllOfNamingConvention from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AssetFamilyListAllOfNamingConvention.parse_obj(obj)

        _obj = AssetFamilyListAllOfNamingConvention.parse_obj({
            "source": obj.get("source"),
            "pattern": obj.get("pattern"),
            "abort_asset_creation_on_error": obj.get("abort_asset_creation_on_error")
        })
        return _obj

