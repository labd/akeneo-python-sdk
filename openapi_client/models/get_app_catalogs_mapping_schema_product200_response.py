# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class GetAppCatalogsMappingSchemaProduct200Response(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[StrictStr] = Field(None, alias="$id", description="id of your schema")
    var_schema: StrictStr = Field(..., alias="$schema", description="$schema indicates which product mapping schema version your app uses")
    comment: Optional[StrictStr] = Field(None, alias="$comment", description="allows you to add a comment")
    title: Optional[StrictStr] = Field(None, description="allows you to add a title to your mapping schema")
    description: Optional[StrictStr] = Field(None, description="allows you to add a description of your mapping schema")
    type: Optional[StrictStr] = Field(None, description="should always be \"object\"")
    properties: Dict[str, Any] = Field(..., description="list and describe the targets your app expects")
    __properties = ["$id", "$schema", "$comment", "title", "description", "type", "properties"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetAppCatalogsMappingSchemaProduct200Response:
        """Create an instance of GetAppCatalogsMappingSchemaProduct200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAppCatalogsMappingSchemaProduct200Response:
        """Create an instance of GetAppCatalogsMappingSchemaProduct200Response from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetAppCatalogsMappingSchemaProduct200Response.parse_obj(obj)

        _obj = GetAppCatalogsMappingSchemaProduct200Response.parse_obj({
            "id": obj.get("$id"),
            "var_schema": obj.get("$schema"),
            "comment": obj.get("$comment"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "properties": obj.get("properties")
        })
        return _obj

