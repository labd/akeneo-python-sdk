# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.asset_family_list_all_of_operations import AssetFamilyListAllOfOperations
from openapi_client.models.asset_family_list_all_of_source import AssetFamilyListAllOfSource
from openapi_client.models.asset_family_list_all_of_target import AssetFamilyListAllOfTarget

class AssetFamilyListAllOfTransformations(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    label: StrictStr = Field(..., description="The name of the transformation")
    filename_suffix: Optional[StrictStr] = Field(None, description="The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.")
    filename_prefix: Optional[StrictStr] = Field(None, description="The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.")
    source: AssetFamilyListAllOfSource = ...
    target: AssetFamilyListAllOfTarget = ...
    operations: AssetFamilyListAllOfOperations = ...
    __properties = ["label", "filename_suffix", "filename_prefix", "source", "target", "operations"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AssetFamilyListAllOfTransformations:
        """Create an instance of AssetFamilyListAllOfTransformations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operations
        if self.operations:
            _dict['operations'] = self.operations.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AssetFamilyListAllOfTransformations:
        """Create an instance of AssetFamilyListAllOfTransformations from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return AssetFamilyListAllOfTransformations.parse_obj(obj)

        _obj = AssetFamilyListAllOfTransformations.parse_obj({
            "label": obj.get("label"),
            "filename_suffix": obj.get("filename_suffix"),
            "filename_prefix": obj.get("filename_prefix"),
            "source": AssetFamilyListAllOfSource.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "target": AssetFamilyListAllOfTarget.from_dict(obj.get("target")) if obj.get("target") is not None else None,
            "operations": AssetFamilyListAllOfOperations.from_dict(obj.get("operations")) if obj.get("operations") is not None else None
        })
        return _obj

