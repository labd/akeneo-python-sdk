# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr

class ReferenceEntityRecordListAllOf(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    code: StrictStr = Field(..., description="Code of the record")
    values: Optional[Dict[str, List[Dict[str, StrictStr]]]] = Field(None, description="Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details")
    created: Optional[StrictStr] = Field('null', description="Date of creation.")
    updated: Optional[StrictStr] = Field('null', description="Date of the last update.")
    __properties = ["code", "values", "created", "updated"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReferenceEntityRecordListAllOf:
        """Create an instance of ReferenceEntityRecordListAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReferenceEntityRecordListAllOf:
        """Create an instance of ReferenceEntityRecordListAllOf from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ReferenceEntityRecordListAllOf.parse_obj(obj)

        _obj = ReferenceEntityRecordListAllOf.parse_obj({
            "code": obj.get("code"),
            "values": obj.get("values"),
            "created": obj.get("created") if obj.get("created") is not None else 'null',
            "updated": obj.get("updated") if obj.get("updated") is not None else 'null'
        })
        return _obj

