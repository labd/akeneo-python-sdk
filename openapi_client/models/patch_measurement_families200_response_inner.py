# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.patch_measurement_families200_response_inner_errors_inner import PatchMeasurementFamilies200ResponseInnerErrorsInner

class PatchMeasurementFamilies200ResponseInner(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    code: Optional[StrictStr] = Field(None, description="Resource code")
    status_code: Optional[StrictInt] = Field(None, description="HTTP status code, see <a href=\"/documentation/responses.html#client-errors\">Client errors</a> to understand the meaning of each code")
    message: Optional[StrictStr] = Field(None, description="Message explaining the error")
    errors: Optional[List[PatchMeasurementFamilies200ResponseInnerErrorsInner]] = Field(None, description="List of errors")
    __properties = ["code", "status_code", "message", "errors"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchMeasurementFamilies200ResponseInner:
        """Create an instance of PatchMeasurementFamilies200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item in self.errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchMeasurementFamilies200ResponseInner:
        """Create an instance of PatchMeasurementFamilies200ResponseInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PatchMeasurementFamilies200ResponseInner.parse_obj(obj)

        _obj = PatchMeasurementFamilies200ResponseInner.parse_obj({
            "code": obj.get("code"),
            "status_code": obj.get("status_code"),
            "message": obj.get("message"),
            "errors": [PatchMeasurementFamilies200ResponseInnerErrorsInner.from_dict(_item) for _item in obj.get("errors")] if obj.get("errors") is not None else None
        })
        return _obj

