# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.get_variation_files_channel_code_locale_code200_response_link import GetVariationFilesChannelCodeLocaleCode200ResponseLink

class DeprecatedAssetVariationFile(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    code: Optional[StrictStr] = Field(None, description="Code of the PAM asset variation file")
    locale: Optional[StrictStr] = Field(None, description="Locale of the PAM asset variation file, equal to `null` if the asset is not localizable")
    scope: Optional[StrictStr] = Field(None, description="Channel of the PAM asset variation file")
    link: Optional[GetVariationFilesChannelCodeLocaleCode200ResponseLink] = Field(None, alias="_link")
    __properties = ["code", "locale", "scope", "_link"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeprecatedAssetVariationFile:
        """Create an instance of DeprecatedAssetVariationFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict['_link'] = self.link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeprecatedAssetVariationFile:
        """Create an instance of DeprecatedAssetVariationFile from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DeprecatedAssetVariationFile.parse_obj(obj)

        _obj = DeprecatedAssetVariationFile.parse_obj({
            "code": obj.get("code"),
            "locale": obj.get("locale"),
            "scope": obj.get("scope"),
            "link": GetVariationFilesChannelCodeLocaleCode200ResponseLink.from_dict(obj.get("_link")) if obj.get("_link") is not None else None
        })
        return _obj

