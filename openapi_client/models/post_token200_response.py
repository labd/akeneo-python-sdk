# coding: utf-8

"""
    Akeneo PIM REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class PostToken200Response(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    access_token: Optional[StrictStr] = Field(None, description="Authentication token that should be given in every authenticated request to the API")
    expires_in: Optional[StrictInt] = Field(None, description="Validity of the token given in seconds, 3600s = 1h by default")
    token_type: Optional[StrictStr] = Field(None, description="Token type, always equal to \"bearer\"")
    scope: Optional[StrictStr] = Field(None, description="Unused, always equal to \"null\"")
    refresh_token: Optional[StrictStr] = Field(None, description="Use this token when your access token has expired. See <a href=\"/documentation/authentication.html#refresh-an-expired-token\">Refresh an expired token</a> section for more details.")
    __properties = ["access_token", "expires_in", "token_type", "scope", "refresh_token"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostToken200Response:
        """Create an instance of PostToken200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostToken200Response:
        """Create an instance of PostToken200Response from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PostToken200Response.parse_obj(obj)

        _obj = PostToken200Response.parse_obj({
            "access_token": obj.get("access_token"),
            "expires_in": obj.get("expires_in"),
            "token_type": obj.get("token_type"),
            "scope": obj.get("scope"),
            "refresh_token": obj.get("refresh_token")
        })
        return _obj

